{"version":3,"sources":["AddCategory.js","helpers/getGifs.js","GifGridItem.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAsCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAkBrC,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,YAAY,wBACZC,MAAUV,EACVW,SApBc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,8BCLlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCQLO,EAVK,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAE3B,OACI,sBAAKc,UAAU,yCAAf,cACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCwBFO,EAxBQ,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EACI,CACIf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAGEqB,EDhBwBK,CAAc1B,GAAhCa,EAFsB,EAE5BN,KAAca,EAFc,EAEdA,QAErB,OACI,qCACI,mCAAOpB,KAENoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEX,qBAAKA,UAAU,YAAf,SAEOH,EAAOJ,KAAK,SAAEC,GAAF,OACZ,wBAAC,EAAD,2BACSA,GADT,IAEIiB,IAAKjB,EAAIC,eEalBiB,EA/BM,WAGjB,IAHuB,EAIa3C,mBADf,CAAC,cAHC,mBAIhB4C,EAJgB,KAIJ7C,EAJI,KAYvB,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ6C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACIA,SAAWA,GACLA,Y,MCrBlC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0ab5501d.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState(''); //Eso no lo debo dejar en cero, si quiero un string vacio solo pongo ''\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2) {\n            setCategories( cat => [ inputValue, ...cat ]);\n            setInputValue('');\n        }\n\n    }\n\n    return ( \n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                placeholder=\"Ingresa una categoria\"\n                value = { inputValue }\n                onChange= { handleInputChange }\n                />\n        </form> \n     );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n \nexport default AddCategory;","/* Los Helpers son lineas de codigo que se usan para entender otro codigo\ny para no escribir un componente con mucho codigo.\n */\n\nexport const getGifs = async ( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=T2Ma1pW2BJeePALPLlsxAnDbAHX5ixn4`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n    \n}\n","\n\nconst GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\"> {/* Recordar que en REACT es className, no un class */}\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n      );\n}\n \nexport default GifGridItem;","/* Necesito recibir la categoríoa que me manda el padre e inmediatamente hacer una peticion HTTP */\n\nimport { useFetchGifs } from \"./hooks/useFetchGifs\";\nimport GifGridItem from './GifGridItem';\n\n\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading}= useFetchGifs( category );\n\n    return ( \n        <>\n            <h3> { category }</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n             <div className=\"card-grid\">\n                {\n                    images.map( ( img ) => \n                    <GifGridItem \n                        { ...img } //De esta forma mando cada propiedad como independiente dentro del objeto IMG\n                        key={img.id}\n                    />\n                    )\n                }\n            </div>\n        </>\n     );\n}\n \nexport default GifGrid;","/* El nombre del archivo USE  significa que es un HOOK, personalizado */\n/* Se usa para cargales tareas independientes */\n\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category ).then( imgs => {\n            setState(\n                {\n                    data: imgs,\n                    loading: false\n                })\n            });\n\n    }, [ category ])\n\n\n    return state;\n}\n \n","import { useState } from \"react\";\nimport AddCategory from \"./AddCategory\";\nimport GifGrid from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n\n    /* const categories = ['One Punch', 'Dragon Ball', 'Samurai X']; */\n    const initialState = ['One Punch'];\n    const [categories, setCategories] = useState(initialState);\n\n/*     const handleAdd = () => {\n        setCategories([...categories, 'HunterXHunter']);\n    }; */\n\n\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid \n                            category={ category } \n                            key={ category }\n                            />\n                        ))\n                }\n            </ol>\n        </>\n      );\n}\n \nexport default GifExpertApp; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}